# Reading C:/altera/13.0/modelsim_ase/tcl/vsim/pref.tcl 
# do Top_run_msim_rtl_verilog.do 
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Copying C:\altera\13.0\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# ** Warning: Copied C:\altera\13.0\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini.
#          Updated modelsim.ini.
# 
# vlog -vlog01compat -work work +incdir+D:/University/Computer\ Architicture\ 2/Project/Computer-Org-2-Project/Design\ Template\ and\ Sample\ Test\ Benches {D:/University/Computer Architicture 2/Project/Computer-Org-2-Project/Design Template and Sample Test Benches/Top.v}
# Model Technology ModelSim ALTERA vlog 10.1d Compiler 2012.11 Nov  2 2012
# -- Compiling module Top
# 
# Top level modules:
# 	Top
# 
vlog -reportprogress 300 -work work {D:/University/Computer Architicture 2/Project/Computer-Org-2-Project/Design Template and Sample Test Benches/control_unit.v}
# Model Technology ModelSim ALTERA vlog 10.1d Compiler 2012.11 Nov  2 2012
# -- Compiling module control_unit
# -- Compiling module testbench_control_unit
# 
# Top level modules:
# 	testbench_control_unit
vsim work.testbench_control_unit
# vsim work.testbench_control_unit 
# Loading work.testbench_control_unit
# Loading work.control_unit
add wave -position insertpoint  \
sim:/testbench_control_unit/Jal_control \
sim:/testbench_control_unit/ID_Flush \
sim:/testbench_control_unit/IF_Flush \
sim:/testbench_control_unit/Store_Byte_control \
sim:/testbench_control_unit/Load_Byte_control \
sim:/testbench_control_unit/control_signal \
sim:/testbench_control_unit/Op_code \
sim:/testbench_control_unit/Funct_ID
run -all
# Jump and link control isx
# ID Flush control isx
# IF Flush control isx
# Store byte control isx
# Load Byte control isx
# control signal isxxxxxxxxxxxxxxxxxxxxxxxx
# Jump and link control is1
# ID Flush control is0
# IF Flush control is1
# Store byte control is0
# Load Byte control is0
# control signal is000100000000011100000000
# Jump and link control is1
# ID Flush control is0
# IF Flush control is1
# Store byte control is0
# Load Byte control is0
# control signal is000100000000011100000000
